/* Generated by: ParserGeneratorCC: Do not edit this line. SyntaxCheckerConstants.java */

/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface SyntaxCheckerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COM1 = 5;
  /** RegularExpression Id. */
  int COM2 = 6;
  /** RegularExpression Id. */
  int CLASS = 7;
  /** RegularExpression Id. */
  int VOID = 8;
  /** RegularExpression Id. */
  int ACCG = 9;
  /** RegularExpression Id. */
  int ACCD = 10;
  /** RegularExpression Id. */
  int PV = 11;
  /** RegularExpression Id. */
  int PARRG = 12;
  /** RegularExpression Id. */
  int PARRD = 13;
  /** RegularExpression Id. */
  int MAIN = 14;
  /** RegularExpression Id. */
  int FINAL = 15;
  /** RegularExpression Id. */
  int RETURN = 16;
  /** RegularExpression Id. */
  int EGAL = 17;
  /** RegularExpression Id. */
  int TABG = 18;
  /** RegularExpression Id. */
  int TABD = 19;
  /** RegularExpression Id. */
  int WRITE = 20;
  /** RegularExpression Id. */
  int WRITELN = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int WHILE = 24;
  /** RegularExpression Id. */
  int PEG = 25;
  /** RegularExpression Id. */
  int PP = 26;
  /** RegularExpression Id. */
  int OU = 27;
  /** RegularExpression Id. */
  int ET = 28;
  /** RegularExpression Id. */
  int EXCL = 29;
  /** RegularExpression Id. */
  int EGEG = 30;
  /** RegularExpression Id. */
  int SUP = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MOINS = 33;
  /** RegularExpression Id. */
  int MULT = 34;
  /** RegularExpression Id. */
  int DIV = 35;
  /** RegularExpression Id. */
  int VRAI = 36;
  /** RegularExpression Id. */
  int FAUX = 37;
  /** RegularExpression Id. */
  int TYPE = 38;
  /** RegularExpression Id. */
  int VIRGULE = 39;
  /** RegularExpression Id. */
  int IDENT = 40;
  /** RegularExpression Id. */
  int STRING = 41;
  /** RegularExpression Id. */
  int NOMBRE = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<COM1>",
    "<COM2>",
    "<CLASS>",
    "\"void \"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"main \"",
    "\"final \"",
    "\"return\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\"write\"",
    "\"writeln\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"+=\"",
    "\"++\"",
    "\"||\"",
    "\"&&\"",
    "\"!\"",
    "\"==\"",
    "\">\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"true\"",
    "\"false\"",
    "<TYPE>",
    "\",\"",
    "<IDENT>",
    "<STRING>",
    "<NOMBRE>",
  };

}
