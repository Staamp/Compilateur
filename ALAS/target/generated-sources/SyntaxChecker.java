/* SyntaxChecker.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. SyntaxChecker.java */
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
public class SyntaxChecker implements SyntaxCheckerConstants {
    public static void main(String[] args) {
 System.out.println(args[0]);
 if (args[0].equals("-f"))
 {

 try {
            new SyntaxChecker(new BufferedReader(new FileReader(args[1]))).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
        }
 }else{

        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
        }
 }
    }

  final public void S() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENT);
    jj_consume_token(ACCG);
    Decls();
    Methmain();
    jj_consume_token(ACCD);
    jj_consume_token(0);
}

  final public void Decls() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VOID:
    case FINAL:
    case TYPE:{
      Decl();
      jj_consume_token(PV);
      Decls();
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
}

//void Decl(): {} {Var() | Methode()}
  final public void Decl() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VOID:
    case TYPE:{
      TypeMeth();
      DeclP();
      break;
      }
    case FINAL:{
      jj_consume_token(FINAL);
      TypeMeth();
      jj_consume_token(IDENT);
      Vexp();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void DeclP() throws ParseException {
    jj_consume_token(IDENT);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case PARRG:{
      jj_consume_token(PARRG);
      Entetes();
      jj_consume_token(PARRD);
      jj_consume_token(ACCG);
      Vars();
      Instrs();
      jj_consume_token(ACCD);
      break;
      }
    case TABG:{
      jj_consume_token(TABG);
      Exp();
      jj_consume_token(TABD);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      Vexp();
    }
}

  final public void Vars() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VOID:
    case FINAL:
    case TYPE:{
      Var();
      jj_consume_token(PV);
      Vars();
      break;
      }
    default:
      jj_la1[3] = jj_gen;

    }
}

//void Var(): {} {TypeMeth()<IDENT> Vexp() | TypeMeth()<TABG>Exp()<TABD> | "final "<TYPE> <IDENT>Vexp() } /*pb de factorisation*/
  final public void Var() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VOID:
    case TYPE:{
      TypeMeth();
      VarP();
      break;
      }
    case FINAL:{
      jj_consume_token(FINAL);
      TypeMeth();
      jj_consume_token(IDENT);
      Vexp();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void VarP() throws ParseException {
    jj_consume_token(IDENT);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case TABG:{
      jj_consume_token(TABG);
      Exp();
      jj_consume_token(TABD);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      Vexp();
    }
}

//On a inversé les deux parties du ou logique et ça marche miraculeusement
  final public void Vexp() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case EGAL:{
      jj_consume_token(EGAL);
      Exp();
      break;
      }
    default:
      jj_la1[6] = jj_gen;

    }
}

  final public void Methode() throws ParseException {
    TypeMeth();
    jj_consume_token(IDENT);
    jj_consume_token(PARRG);
    Entetes();
    jj_consume_token(PARRD);
    jj_consume_token(ACCG);
    Vars();
    Instrs();
    jj_consume_token(ACCD);
}

  final public void Methmain() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(ACCG);
    Vars();
    Instrs();
    jj_consume_token(ACCD);
}

//void Entetes(): {} { Entete() <VIRGULE> Entetes() | Entete() | {}}
  final public void Entetes() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case TYPE:{
      Entete();
      EntetesP();
      break;
      }
    default:
      jj_la1[7] = jj_gen;

    }
}

  final public void EntetesP() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VIRGULE:{
      jj_consume_token(VIRGULE);
      Entetes();
      break;
      }
    default:
      jj_la1[8] = jj_gen;

    }
}

  final public void Entete() throws ParseException {
    jj_consume_token(TYPE);
    jj_consume_token(IDENT);
}

  final public void Instrs() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case RETURN:
    case WRITE:
    case WRITELN:
    case IF:
    case WHILE:
    case IDENT:{
      Instr();
      jj_consume_token(PV);
      Instrs();
      break;
      }
    default:
      jj_la1[9] = jj_gen;

    }
}

//void Instr(): {} {Ident1() <EGAL> Exp() | Ident1() <PEG> Exp() | Ident1() <PP> | <IDENT><PARRG> Listexp() <PARRD> | <RETURN> Exp() | <WRITE> <PARRG> <IDENT> | <STRING> */<PARRD> | <WRITELN> <PARRG> <IDENT> | <STRING> */<PARRD> | <IF> Exp() <ACCG> Instrs() <ACCD> ( <ELSE><ACCG> Instrs() <ACCD> )? | <WHILE> <PARRG> Exp() <PARRD> <ACCG>Instrs()<ACCD> }
  final public void Instr() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case IDENT:{
      jj_consume_token(IDENT);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case EGAL:
      case TABG:
      case PEG:
      case PP:{
        Ident1();
        InstrP();
        break;
        }
      case PARRG:{
        jj_consume_token(PARRG);
        Listexp();
        jj_consume_token(PARRD);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      Exp();
      break;
      }
    case WRITE:{
      jj_consume_token(WRITE);
      jj_consume_token(PARRG);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case IDENT:{
        jj_consume_token(IDENT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARRD);
      break;
      }
    case WRITELN:{
      jj_consume_token(WRITELN);
      jj_consume_token(PARRG);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case IDENT:{
        jj_consume_token(IDENT);
        break;
        }
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PARRD);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      Exp();
      jj_consume_token(ACCG);
      Instrs();
      jj_consume_token(ACCD);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        jj_consume_token(ACCG);
        Instrs();
        jj_consume_token(ACCD);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(PARRG);
      Exp();
      jj_consume_token(PARRD);
      jj_consume_token(ACCG);
      Instrs();
      jj_consume_token(ACCD);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void InstrP() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case EGAL:{
      jj_consume_token(EGAL);
      Exp();
      break;
      }
    case PEG:{
      jj_consume_token(PEG);
      Exp();
      break;
      }
    case PP:{
      jj_consume_token(PP);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//void Listexp(): {} {Exp() <VIRGULE> Listexp() | Exp() | {}}
  final public void Listexp() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case PARRG:
    case EXCL:
    case VRAI:
    case FAUX:
    case IDENT:
    case NOMBRE:{
      Exp();
      ListexpP();
      break;
      }
    default:
      jj_la1[16] = jj_gen;

    }
}

  final public void ListexpP() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VIRGULE:{
      jj_consume_token(VIRGULE);
      Listexp();
      break;
      }
    default:
      jj_la1[17] = jj_gen;

    }
}

//void Exp(): {} {<EXCL> Exp1() | Exp() <ET> Exp1() | Exp() <OU> Exp1() | Exp1()} /*pb rec à gauche*/
  final public void Exp() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case EXCL:{
      jj_consume_token(EXCL);
      Exp1();
      ExpP();
      break;
      }
    case PARRG:
    case VRAI:
    case FAUX:
    case IDENT:
    case NOMBRE:{
      Exp1();
      ExpP();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//corrige la rec à gauche de Exp => à vérifier
  final public void ExpP() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case ET:{
      jj_consume_token(ET);
      Exp1();
      ExpP();
      break;
      }
    case OU:{
      jj_consume_token(OU);
      Exp1();
      ExpP();
      break;
      }
    default:
      jj_la1[19] = jj_gen;

    }
}

//corrige la rec à gauche de Exp => à vérifier
//void Exp1(): {} {Exp1() <EGEG> Exp2() | Exp1() <SUP> Exp2() | Exp2()}/*pb rec à gauche*/
  final public void Exp1() throws ParseException {
    Exp2();
    Exp1P();
}

//corrige la rec à gauche de Exp1 => à vérifier
  final public void Exp1P() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case EGEG:{
      jj_consume_token(EGEG);
      Exp2();
      Exp1P();
      break;
      }
    case SUP:{
      jj_consume_token(SUP);
      Exp2();
      Exp1P();
      break;
      }
    default:
      jj_la1[20] = jj_gen;

    }
}

//corrige la rec à gauche de Exp1 => à vérifier
//void Exp2(): {} {Exp2() <PLUS> Terme() | Exp2() <MOINS> Terme() | Terme()}/*pb rec à gauche*/
  final public void Exp2() throws ParseException {
    Terme();
    Exp2P();
}

//corrige la rec à gauche de Exp2 => à vérifier
  final public void Exp2P() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      Terme();
      Exp2P();
      break;
      }
    case MOINS:{
      jj_consume_token(MOINS);
      Terme();
      Exp2P();
      break;
      }
    default:
      jj_la1[21] = jj_gen;

    }
}

//corrige la rec à gauche de Exp2 => à vérifier
//void Terme(): {} {Terme() <MULT> Fact() | Terme() <DIV> Fact() | Fact()}/*pb rec à gauche*/
  final public void Terme() throws ParseException {
    Fact();
    TermeP();
}

//corrige la rec à gauche de Exp2 => à vérifier
  final public void TermeP() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case MULT:{
      jj_consume_token(MULT);
      Fact();
      TermeP();
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      Fact();
      TermeP();
      break;
      }
    default:
      jj_la1[22] = jj_gen;

    }
}

//corrige la rec à gauche de Exp2 => à vérifier
  final public void Fact() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case IDENT:{
      jj_consume_token(IDENT);
      FactP();
      break;
      }
    case VRAI:{
      jj_consume_token(VRAI);
      break;
      }
    case FAUX:{
      jj_consume_token(FAUX);
      break;
      }
    case NOMBRE:{
      jj_consume_token(NOMBRE);
      break;
      }
    case PARRG:{
      jj_consume_token(PARRG);
      Exp();
      jj_consume_token(PARRD);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void FactP() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case TABG:{
      jj_consume_token(TABG);
      Exp();
      jj_consume_token(TABD);
      break;
      }
    case PARRG:{
      jj_consume_token(PARRG);
      Listexp();
      jj_consume_token(PARRD);
      break;
      }
    default:
      jj_la1[24] = jj_gen;

    }
}

  final public void Ident1() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case TABG:{
      jj_consume_token(TABG);
      Exp();
      jj_consume_token(TABD);
      break;
      }
    default:
      jj_la1[25] = jj_gen;

    }
}

//POSE PROBLEME DANS INSTR
  final public void TypeMeth() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    case TYPE:{
      jj_consume_token(TYPE);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public SyntaxCheckerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8100,0x8100,0x41000,0x8100,0x8100,0x40000,0x20000,0x0,0x0,0x1710000,0x6061000,0x0,0x0,0x800000,0x1710000,0x6020000,0x20001000,0x0,0x20001000,0x18000000,0xc0000000,0x0,0x0,0x1000,0x41000,0x40000,0x100,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x40,0x40,0x0,0x40,0x40,0x0,0x0,0x40,0x80,0x100,0x0,0x300,0x300,0x0,0x100,0x0,0x530,0x80,0x530,0x0,0x0,0x3,0xc,0x530,0x0,0x0,0x40,};
	}

  /**
   * Constructor with InputStream.
   * @param stream input stream
   */
  public SyntaxChecker(final java.io.InputStream stream) {
	  this(stream, null);
  }

  /**
   * Constructor with InputStream and supplied encoding
   * @param stream input stream
   * @param encoding charset to be used
   */
  public SyntaxChecker(final java.io.InputStream stream, final String encoding) {
   try {
     jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
   } catch(final java.io.UnsupportedEncodingException e) {
     throw new IllegalStateException(e);
   }
	 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param stream input stream
   */
  public void ReInit(final java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /**
   * Reinitialise
   * @param stream input stream
   * @param encoding charset to be used
   */
  public void ReInit(final java.io.InputStream stream, final String encoding) {
	  try {
      jj_input_stream.reInit(stream, encoding, 1, 1);
    } catch(final java.io.UnsupportedEncodingException e) { 
      throw new IllegalStateException(e);
    }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public SyntaxChecker(final java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 27; i++)
     jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final java.io.Reader stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 27; i++)
     jj_la1[i] = -1;
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public SyntaxChecker(final SyntaxCheckerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final SyntaxCheckerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /**
   * @return Always <code>false</code>.
   */
  public final boolean trace_enabled() {
    return false;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

}
