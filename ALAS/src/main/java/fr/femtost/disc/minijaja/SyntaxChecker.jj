PARSER_BEGIN(SyntaxChecker)
package fr.femtost.disc.minijaja;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import fr.femtost.disc.minijaja.Memoire;
import fr.femtost.disc.minijaja.ast.*;
import fr.femtost.disc.minijaja.ast.expr.identificateur.*;
import fr.femtost.disc.minijaja.ast.expr.*;
import fr.femtost.disc.minijaja.ast.type.*;
import fr.femtost.disc.minijaja.ast.listexpr.*;
import fr.femtost.disc.minijaja.ast.instr.*;
import fr.femtost.disc.minijaja.ast.instrs.*;
import fr.femtost.disc.minijaja.ast.instr.ecrire.*;
import fr.femtost.disc.minijaja.ast.entetes.*;
import fr.femtost.disc.minijaja.ast.decl.var.*;
import fr.femtost.disc.minijaja.ast.vars.*;
import fr.femtost.disc.minijaja.ast.decl.*;
import fr.femtost.disc.minijaja.ast.decls.*;

public class SyntaxChecker {
    public static void main(String[] args) {
        System.out.println(args[0]);
        ASTClass cl;
        if (args[0].equals("-f"))
        {

        try {
                cl = new SyntaxChecker(new BufferedReader(new FileReader(args[1]))).S();
                System.out.println("Syntax is okay");

                System.out.println(cl.rewrite());
                System.out.println(cl.compiler(1).jCodes.rewriteWithLines());
                cl.interpreter(new Memoire(128));
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }else{

            try {
                cl = new SyntaxChecker(new java.io.StringReader(args[0])).S();
                System.out.println("Syntax is okay");

                System.out.println(cl.rewrite());
                System.out.println(cl.compiler(1).jCodes.rewriteWithLines());
                cl.interpreter(new Memoire(4096));
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }
    }
}

PARSER_END(SyntaxChecker)

 SKIP:  { " " | <"\t"> | <"\n"> | <"\r">|<COM1: ("//" (~["\r", "\n"])*)> | <COM2:("/*"(~["*"] | "*"~["/"])*"*/")> }
TOKEN: {
	<CLASS: "class"(" ")>
|   <VOID: "void ">
|	<ACCG: "{">
|	<ACCD: "}">
|	<PV: ";">
|	<PARRG: "(">
|	<PARRD :")">
|	<MAIN:"main">
|	<FINAL:"final">
|	<RETURN: "return">
|	<EGAL: "=">
|	<TABG: "[">
|	<TABD: "]">
|	<WRITE: "write">
|	<WRITELN: "writeln">
|	<IF: "if">
|	<ELSE: "else">
|	<WHILE: "while">
|	<PEG: "+=">
|	<PP: "++">
|	<OU: "||">
|	<ET: "&&">
|	<EXCL: "!">
|	<EGEG : "==">
	//<INF>|
|	<SUP : ">">
|	<PLUS : "+">
|	<MOINS : "-">
|	<MULT : "*">
|	<DIV : "/">
|	<VRAI: "true">
|	<FAUX: "false">
|	<ENTIER: "int">
|	<BOOL: "boolean">
|	<VIRGULE: ",">
|	<IDENT: ((["a"-"z"])+|(["A"-"Z"])+)((["a"-"z"])*(["A"-"Z"])*(["0"-"9"])*)>
|	<STRING:("\""(~["\""])*"\"")>
|	<NOMBRE: (["0"-"9"])+>
}

ASTClass S(): {ASTDecls ds; ASTMain mm;Token t;}{
    <CLASS> t = <IDENT> <ACCG> ds = Decls() mm = Methmain() <ACCD> <EOF>{
    ASTClass ret = new ASTClass(new Identifiant(t.image), ds, mm);
    ret.setPosition(t.beginLine,t.beginColumn);
    return ret;}
}

ASTDecls Decls(): {ASTDecls ds; ASTDecl d;} {
    d = Decl() <PV> ds= Decls() {return new DChain(ds, d);}
    | {return new Dnil();}
}

ASTDecl Decl(): {ASTTypeMeth me; ASTExpr e; Token t; ASTDecl d;ASTType astt;}
{   me =TypeMeth() d =DeclP(me) {return d;}
    |  <FINAL> astt = Type() t = <IDENT> e =Vexp(){ASTDecl ret =  new ASTVarConst(astt,new Identifiant(t.image),e);ret.setPosition(t.beginLine,t.beginColumn); return ret;}}

ASTDecl DeclP(ASTTypeMeth me): {Token t; ASTEntetes e; ASTVars v; ASTInstrs iss; ASTExpr ex;}{
    t = <IDENT>(<PARRG> e = Entetes()<PARRD><ACCG>v =Vars() iss =Instrs()<ACCD> {ASTDecl ret =  new ASTMethode(me,new Identifiant(t.image),e,v,iss);ret.setPosition(t.beginLine,t.beginColumn); return ret;}
|   <TABG> ex =Exp()<TABD> {ASTDecl ret = new ASTVarTableau(me, new Identifiant(t.image),ex);ret.setPosition(t.beginLine,t.beginColumn); return ret;}
|   ex =Vexp(){ASTDecl ret =  new ASTVarSimple(me, new Identifiant(t.image),ex);ret.setPosition(t.beginLine,t.beginColumn); return ret;})}

ASTVars Vars(): {ASTVar v; ASTVars vs;}{
    v = Var() <PV> vs = Vars() {return new VChain(v,vs);}
    | {return new Vnil();}
}

ASTVar Var(): {ASTTypeMeth tm; ASTVar vp; ASTExpr e;Token t;ASTType astt;}{
    tm = TypeMeth() vp = VarP(tm) {return vp;}
    | <FINAL>  astt= Type() t = <IDENT> e = Vexp() {ASTVar ret = new ASTVarConst(astt,new Identifiant(t.image),e);ret.setPosition(t.beginLine,t.beginColumn); return ret;}
}

ASTVar VarP(ASTTypeMeth me): {Token t; ASTExpr e;}{
    t = <IDENT>
        (<TABG> e = Exp() <TABD> {ASTVar ret =  new ASTVarTableau(me, new Identifiant(t.image),e); ret.setPosition(t.beginLine,t.beginColumn); return ret;}
          | e = Vexp() {ASTVar ret = new ASTVarSimple(me, new Identifiant(t.image),e);ret.setPosition(t.beginLine,t.beginColumn); return ret;}
        )
}

ASTExpr Vexp(): {ASTExpr e;} {
     <EGAL> e = Exp() {return e;}
    | {return new Omega();}
}


ASTMethode Methode(): {ASTTypeMeth tm; Token t; ASTEntetes et; ASTVars v; ASTInstrs iss;}{
    tm = TypeMeth() t=<IDENT><PARRG> et = Entetes()<PARRD><ACCG>v = Vars() iss = Instrs()<ACCD>{ASTMethode ret = new ASTMethode(tm,new Identifiant(t.image),et,v,iss);ret.setPosition(t.beginLine,t.beginColumn); return ret;}
}

ASTMain Methmain(): {ASTVars v; ASTInstrs iss;}{
     <MAIN> <ACCG> v = Vars() iss = Instrs() <ACCD>{return new ASTMain(v,iss);}
}

ASTEntetes Entetes(): {ASTEntete e; ASTEntetes ep;}{
     e = Entete() ep = EntetesP(e) {return ep;}
     | {return new Enil();}
}

ASTEntetes EntetesP(ASTEntete e): {ASTEntetes ep;}{
    <VIRGULE> ep = Entetes() {return new EChain(ep,e);}
    | {return new EChain(new Enil(), e);}
}

ASTEntete Entete(): {Token t1; ASTType t2;} {
     t2 = Type() t1 = <IDENT> {ASTEntete ret =  new ASTEntete(new Identifiant(t1.image),t2); ret.setPosition(t1.beginLine,t1.beginColumn); return ret;}
}

ASTInstrs Instrs(): {ASTInstr is; ASTInstrs iss;}{
    is = Instr() <PV> iss = Instrs() {return new IChain(is,iss);}
    | {return new Inil();}
}

ASTInstr Instr(): {Token t; ASTExpr e;ASTListExpr exp; ASTInstrs instrs, instrs1; ASTInstr ins;}{
    t = <IDENT> (
        ins = InstrP(t) {ins.setPosition(t.beginLine,t.beginColumn);return ins;}
        | <PARRG> exp = Listexp() <PARRD> {
            ASTInstr ret =  new AppelI(new Identifiant(t.image), exp);
            ret.setPosition(t.beginLine,t.beginColumn);
            return ret;
        }
    )
    | t = <RETURN> e = Exp() {
        ASTInstr ret = new Retour(e);
        ret.setPosition(t.beginLine,t.beginColumn);
        return ret;
    }
    | <WRITE> <PARRG>  (t = <IDENT> <PARRD> {ASTInstr ret = new Ecrire(new Identifiant(t.image)); ret.setPosition(t.beginLine,t.beginColumn); return ret;}
    | t = <STRING> <PARRD> {ASTInstr ret = new Ecrire(new HardcodedString(t.image)); ret.setPosition(t.beginLine,t.beginColumn); return ret;})
    | <WRITELN> <PARRG>  (t = <STRING> <PARRD> {ASTInstr ret = new EcrireLn(new HardcodedString(t.image));ret.setPosition(t.beginLine,t.beginColumn); return ret; } |t = <IDENT> <PARRD> {ASTInstr ret = new EcrireLn(new Identifiant(t.image)); ret.setPosition(t.beginLine,t.beginColumn); return ret;})
    | t = <IF> e = Exp() <ACCG> instrs = Instrs() <ACCD> (
        <ELSE><ACCG> instrs1 = Instrs() <ACCD>{ASTInstr ret = new Si(e,instrs, instrs1); ret.setPosition(t.beginLine,t.beginColumn); return ret;}
        | {ASTInstr ret = new Si(e,instrs, new Inil());ret.setPosition(t.beginLine,t.beginColumn); return ret;}
    )
    | t = <WHILE> <PARRG> e = Exp() <PARRD> <ACCG>instrs = Instrs()<ACCD>{ASTInstr ret = new TantQue(e,instrs);ret.setPosition(t.beginLine,t.beginColumn); return ret;}
}


ASTInstr InstrP(Token t): {ASTExpr e; ASTIdentGenerique ident; ASTInstr inst;}{
    <EGAL> e = Exp(){return new Affectation(new Identifiant(t.image), e);}
    | <PEG> e = Exp(){return new Somme(new Identifiant(t.image), e);}
    | <PP> {return new Increment(new Identifiant(t.image));}
    | <TABG> e = Exp() <TABD> {ident = new Tableau(t.image, e);} inst = InstrTableau(ident) {return inst;}
}

ASTInstr InstrTableau(ASTIdentGenerique g): {ASTExpr e;} {
    <EGAL> e = Exp(){return new Affectation(g, e);}
    | <PEG> e = Exp(){return new Somme(g, e);}
    | <PP> {return new Increment(g);}
}


ASTListExpr Listexp(): {ASTListExpr ls; ASTExpr e;} {
    e = Exp() ls = ListexpP() {return new ExChain(e, ls);}
    | {return new Exnil();}
}

ASTListExpr ListexpP(): {ASTListExpr ls;} {
    <VIRGULE> ls = Listexp() {return ls;}
    | {return new Exnil();}
}

ASTExpr Exp(): {ASTExpr result;}{
    <EXCL> result = Exp1() {result = new Not(result);} result = ExpP(result) {return result;}
    | result = Exp1() result = ExpP(result) {return result;}
}

ASTExpr ExpP(ASTExpr left) : {ASTExpr result;} {
    <ET> result = Exp1() {result = new Binop(Binop.Operandes.AND, left, result);} result = ExpP(result) {return result;}
    | <OU> result = Exp1() {result = new Binop(Binop.Operandes.OR, left, result);} result = ExpP(result) {return result;}
    | {return left;}
}

ASTExpr Exp1(): {ASTExpr expr;}{
    expr = Exp2() expr = Exp1P(expr) {return expr;}
}

ASTExpr Exp1P(ASTExpr left) : {ASTExpr result;}{
    <EGEG> result = Exp2() {result = new Binop(Binop.Operandes.EGAL, left, result);} result = Exp1P(result) {return result;}
    | <SUP> result = Exp2() {result = new Binop(Binop.Operandes.SUPERIEUR, left, result);} result = Exp1P(result) {return result;}
    | {return left;}
}


ASTExpr Exp2(): {ASTExpr expr;} {
    expr = Terme() expr = Exp2P(expr) {return expr;}
    | <MOINS> expr = Terme() {return new Negation(expr);}
}

ASTExpr Exp2P(ASTExpr left): {ASTExpr result;} {
    <PLUS> result = Terme() {result = new Binop(Binop.Operandes.ADDITION, left, result);} result = Exp2P(result) {
    int posL = left.getLine();
    int posC = left.getColumn();
    result.setPosition(posL,posC);
    return result;
    }
    | <MOINS> result = Terme() {result = new Binop(Binop.Operandes.SOUSTRACTION, left, result);} result = Exp2P(result) {return result;}
    | {return left;}
}


ASTExpr Terme(): {ASTExpr expr;}{
    expr = Fact() expr = TermeP(expr) {return expr;}
}

ASTExpr TermeP(ASTExpr left): {ASTExpr result;}{
    <MULT> result = Fact() {result = new Binop(Binop.Operandes.MULTIPLICATION, left, result);} result = TermeP(result) {return result;}
    | <DIV> result = Fact() {result = new Binop(Binop.Operandes.DIVISION, left, result);} result = TermeP(result) {return result;}
    | {return left;}
}

ASTExpr Fact(): {Token t; ASTExpr e;} {
    t = <IDENT> e = FactP(t) {
        ASTExpr ret  = e;
        ret.setPosition(t.beginLine,t.beginColumn);
        return e;
    }
    | t = <VRAI> {
        ASTExpr ret = new BoolVal(true);
        ret.setPosition(t.beginLine,t.beginColumn);
        return ret;
    }
    | t = <FAUX> {
        ASTExpr ret = new BoolVal(false);
         ret.setPosition(t.beginLine,t.beginColumn);
        return ret;
    }
    | t = <NOMBRE> {
        ASTExpr ret = new Nbre(Integer.parseInt(t.image));
        ret.setPosition(t.beginLine,t.beginColumn);
        return ret;
    }
    |<PARRG> e = Exp()<PARRD> {
        return e;
    }
}

ASTExpr FactP(Token t): {ASTExpr e; ASTListExpr ls;}{
    <TABG> e = Exp() <TABD> {return new Tableau(t.image, e);}
    | <PARRG> ls = Listexp() <PARRD> {return new AppelE(new Identifiant(t.image), ls);}
    | {return new Identifiant(t.image);}
}

ASTExpr Ident1(): {ASTExpr expression;} {
      <TABG> expression = Exp() <TABD> {return expression;}
    | {return new Omega();}
}

ASTTypeMeth TypeMeth(): {ASTType t;} {
    <VOID> { return new fr.femtost.disc.minijaja.ast.type.Void();}
    | t = Type() { return t; }
}

ASTType Type(): {} {
    <ENTIER> {return new Entier();}
    | <BOOL> {return new Booleen();}
}