PARSER_BEGIN(SyntaxChecker)
package fr.femtost.disc.minijaja;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import fr.femtost.disc.minijaja.Memoire;
import fr.femtost.disc.minijaja.ast.*;
import fr.femtost.disc.minijaja.ast.expr.identificateur.*;
import fr.femtost.disc.minijaja.ast.expr.*;
import fr.femtost.disc.minijaja.ast.type.*;
import fr.femtost.disc.minijaja.ast.listexpr.*;
import fr.femtost.disc.minijaja.ast.instr.*;
import fr.femtost.disc.minijaja.ast.instrs.*;
import fr.femtost.disc.minijaja.ast.instr.ecrire.*;
import fr.femtost.disc.minijaja.ast.entetes.*;
import fr.femtost.disc.minijaja.ast.decl.var.*;
import fr.femtost.disc.minijaja.ast.vars.*;
import fr.femtost.disc.minijaja.ast.decl.*;
import fr.femtost.disc.minijaja.ast.decls.*;

public class SyntaxChecker {
    public static void main(String[] args) {
        System.out.println(args[0]);
        ASTClass cl;
        if (args[0].equals("-f"))
        {

        try {
                cl = new SyntaxChecker(new BufferedReader(new FileReader(args[1]))).S();
                System.out.println("Syntax is okay");

                System.out.println(cl.rewrite());
                System.out.println(cl.compiler(1).jCodes.rewriteWithLines());
                cl.interpreter(new Memoire(128));
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }else{

            try {
                cl = new SyntaxChecker(new java.io.StringReader(args[0])).S();
                System.out.println("Syntax is okay");

                System.out.println(cl.rewrite());
                System.out.println(cl.compiler(1).jCodes.rewriteWithLines());
                cl.interpreter(new Memoire(4096));
            } catch (Throwable e) {
                System.out.println("Syntax check failed: " + e.getMessage());
            }
        }
    }
}

PARSER_END(SyntaxChecker)

 SKIP:  { " " | <"\t"> | <"\n"> | <"\r">|<COM1: ("//" (~["\r", "\n"])*)> | <COM2:("/*"(~["*"] | "*"~["/"])*"*/")> }
TOKEN: {
	<CLASS: "class"(" ")>{ System.out.println("Déclaration d'une nouvelle classe");} |
	<VOID: "void ">{System.out.println("Déclaration d'une instance void");}|
	<ACCG: "{">{System.out.println("Ouverture d'une accolade");}|
	<ACCD: "}">{System.out.println("Fermeture d'une accolade");}|
	<PV: ";">{System.out.println("Point virgule");}|
	<PARRG: "(">{System.out.println("Ouverture d'une parenthèse");}|
	<PARRD :")">{System.out.println("Fermeture d'une parenthèse");}|
	<MAIN:"main">{System.out.println("Méthode principale");}|
	<FINAL:"final">{System.out.println("méthode ou variable final");}|
	<RETURN: "return">{System.out.println("retour attendu");}|
	<EGAL: "=">{System.out.println("Affectation");}|
	<TABG: "[">{System.out.println("Ouverture de crochets");}|
	<TABD: "]">{System.out.println("Fermeture de crochets");}|
	<WRITE: "write">{System.out.println("La console doit écrire");}|
	<WRITELN: "writeln">{System.out.println("La console doit écrire puis revenir à la ligne");}|
	<IF: "if">{System.out.println("Si");}|
	<ELSE: "else">{System.out.println("Sinon");}|
	<WHILE: "while">{System.out.println("Tant que");}|
	<PEG: "+=">{System.out.println("Est égal à la valeur plus 1");}|
	<PP: "++">{System.out.println("Incrémentation");}|
	<OU: "||">{System.out.println("Ou");}|
	<ET: "&&">{System.out.println("Et");}|
	<EXCL: "!">{System.out.println("Point d'exclamation");}|
	<EGEG : "==">{System.out.println("Est égal à ");}|
	//<INF>|
	<SUP : ">">{System.out.println("Est supérieur à");}|
	<PLUS : "+">{System.out.println("Addition");}|
	<MOINS : "-">{System.out.println("Soustraction");}|
	<MULT : "*">{System.out.println("Multiplication");}|
	<DIV : "/">{System.out.println("Division");}|
	<VRAI: "true">{System.out.println("Vrai");}|
	<FAUX: "false">{System.out.println("Faux");}|
	<ENTIER: "int">{ System.out.println("Type entier");} |
	<BOOL: "boolean">{ System.out.println("Type booleen");} |
	<VIRGULE: ",">{} |

	<IDENT: ((["a"-"z"])+|(["A"-"Z"])+)((["a"-"z"])*(["A"-"Z"])*(["0"-"9"])*)>{ System.out.println("Identificateur :"+ matchedToken.image);} |//Commence forcément par une lettre majuscule ou minuscule, modifiable
	//<TypeMeth: "void" | <TYPE>>{ System.out.println("Type de la méthode : "+ matchedToken.image);} |
	<STRING:("\""(~["\""])*"\"")>{ System.out.println("Chaine de caractères :"+ matchedToken.image);}|
	<NOMBRE: (["0"-"9"])+>{ System.out.println("Entier :"+ matchedToken.image);}
}

//void S(): {} {<CLASS> <IDENT> <ACCG> Decls() Methmain() <ACCD> <EOF>  }
ASTClass S(): {ASTDecls ds; ASTMain mm;Token t;}{
    <CLASS> t = <IDENT> <ACCG> ds = Decls() mm = Methmain() <ACCD> <EOF>{return new ASTClass(new Identifiant(t.image), ds, mm);}
}
//void Decls(): {} {Decl()<PV>Decls()| {} }
ASTDecls Decls(): {ASTDecls ds; ASTDecl d;} {
    d = Decl() <PV> ds= Decls() {return new DChain(ds, d);}
    | {return new Dnil();}
}
//void Decl(): {} {Var() | Methode()}
ASTDecl Decl(): {ASTTypeMeth me; ASTExpr e; Token t; ASTDecl d;ASTType astt;}
{   me =TypeMeth() d =DeclP(me) {return d;}
    |  <FINAL> astt = Type() t = <IDENT> e =Vexp(){return new ASTVarConst(astt,new Identifiant(t.image),e);}}

ASTDecl DeclP(ASTTypeMeth me): {Token t; ASTEntetes e; ASTVars v; ASTInstrs iss; ASTExpr ex;}
{ t = <IDENT>(<PARRG> e = Entetes()<PARRD><ACCG>v =Vars() iss =Instrs()<ACCD> {return new ASTMethode(me,new Identifiant(t.image),e,v,iss);}| <TABG> ex =Exp()<TABD> {return new ASTVarTableau(new Identifiant(t.image),ex,me);}| ex =Vexp(){return new ASTVarSimple(new Identifiant(t.image),ex,me);})}

/*ASTDecl DeclP(Token t): {ASTEntetes es; ASTVars vs; ASTInstrs iss; ASTExp e; ASTExp ve}{
        <IDENT> <PARRG>es = Entetes()<PARRD> <ACCG> vs = Vars() iss=Instrs() <ACCD>{return new ASTMethode()}
        |<TABG> e = Exp() <TABD> ve = Vexp(){return }
}*///a completer avec DChain


//void Vars(): {} {Var()<PV>Vars()|{}}

ASTVars Vars(): {ASTVar v; ASTVars vs;}{
    v = Var() <PV> vs = Vars() {return new VChain(v,vs);}
    | {return new Vnil();}
}//a corriger
//void Var(): {} {TypeMeth()<IDENT> Vexp() | TypeMeth()<TABG>Exp()<TABD> | "final "<TYPE> <IDENT>Vexp() } /*pb de factorisation*/
//void Var(): {} {TypeMeth()  VarP() | <FINAL> TypeMeth() <IDENT>Vexp() }
ASTVar Var(): {ASTTypeMeth tm; ASTVar vp; ASTExpr e;Token t;ASTType astt;}{
    tm = TypeMeth() vp = VarP(tm) {return vp;}
    | <FINAL>  astt= Type() t = <IDENT> e = Vexp() {return new ASTVarConst(astt,new Identifiant(t.image),e);}
}
//void VarP(): {} {<IDENT>(<TABG> Exp()<TABD>|Vexp())}//On a inversé les deux parties du ou logique et ça marche miraculeusement

ASTVar VarP(ASTTypeMeth me): {Token t; ASTExpr e;}{
    t = <IDENT>
        (<TABG> e = Exp() <TABD> {return new ASTVarTableau(new Identifiant(t.image),e,me);}
          | e = Vexp() {return new ASTVarSimple(new Identifiant(t.image),e,me);}
        )
}//Verifier le return et la sont entete

ASTExpr Vexp(): {ASTExpr e;} {
     <EGAL> e = Exp() {return e;}
    | {return new Omega();}}
/*ASTExpr Vexp(): {ASTExpr e;}{
    <EGAL> e = Exp() {return new ASTEXPR(e)}//c'est quoi Vexp?
    | {return vnil;}
}*/

//void Methode(): {} {TypeMeth() <IDENT><PARRG>Entetes()<PARRD><ACCG>Vars() Instrs()<ACCD>}
ASTMethode Methode(): {ASTTypeMeth tm; Token t; ASTEntetes et; ASTVars v; ASTInstrs iss;}{
    tm = TypeMeth() t=<IDENT><PARRG> et = Entetes()<PARRD><ACCG>v = Vars() iss = Instrs()<ACCD>{return new ASTMethode(tm,new Identifiant(t.image),et,v,iss);}
}
//void Methmain(): {} {<MAIN> <ACCG> Vars() Instrs()<ACCD>}
ASTMain Methmain(): {ASTVars v; ASTInstrs iss;}{
     <MAIN> <ACCG> v = Vars() iss = Instrs() <ACCD>{return new ASTMain(v,iss);}
}
//void Entetes(): {} { Entete() <VIRGULE> Entetes() | Entete() | {}}
//void Entetes(): {} {Entete() EntetesP() | {}}

ASTEntetes Entetes(): {ASTEntete e; ASTEntetes ep;}{
     e = Entete() ep = EntetesP(e) {return ep;}
     | {return new Enil();}
}

//void EntetesP() : {} {<VIRGULE> Entetes() | {}}
ASTEntetes EntetesP(ASTEntete e): {ASTEntetes ep;}{
    <VIRGULE> ep = Entetes() {return new EChain(ep,e);}
    | {return new EChain(new Enil(), e);}
}

ASTEntete Entete(): {Token t1; ASTType t2;} {
     t2 = Type() t1 = <IDENT> {return new ASTEntete(new Identifiant(t1.image),t2);}
}
/*
ASTEntete Entete(): {ASTEntete ls;} {
    e = Entetes {return new EChain(e);}
}*/

//void Instrs(): {} { Instr() <PV> Instrs() | {}}

ASTInstrs Instrs(): {ASTInstr is; ASTInstrs iss;}{
    is = Instr() <PV> iss = Instrs() {return new IChain(is,iss);}
    | {return new Inil();}
}

//void Instr(): {} {Ident1() <EGAL> Exp() | Ident1() <PEG> Exp() | Ident1() <PP> | <IDENT><PARRG> Listexp() <PARRD> | <RETURN> Exp() | <WRITE> <PARRG> <IDENT> | <STRING> */<PARRD> | <WRITELN> <PARRG> <IDENT> | <STRING> */<PARRD> | <IF> Exp() <ACCG> Instrs() <ACCD> ( <ELSE><ACCG> Instrs() <ACCD> )? | <WHILE> <PARRG> Exp() <PARRD> <ACCG>Instrs()<ACCD> }


//void Instr(): {} {<IDENT>((Ident1()InstrP())|<PARRG> Listexp() <PARRD>) | <RETURN> Exp() | <WRITE> <PARRG> (<IDENT> | <STRING>) <PARRD> | <WRITELN> <PARRG> (<IDENT> | <STRING>) <PARRD> | <IF> Exp() <ACCG> Instrs() <ACCD> ( <ELSE><ACCG> Instrs() <ACCD> )? | <WHILE> <PARRG> Exp() <PARRD> <ACCG>Instrs()<ACCD> }
ASTInstr Instr(): {Token t; ASTExpr e;ASTListExpr exp; ASTInstrs instrs, instrs1; ASTInstr ins;}{
    t = <IDENT> (
        ins = InstrP(t) {return ins;}
        | <PARRG> exp = Listexp() <PARRD> {return new AppelI(new Identifiant(t.image), exp);}
    )
    | <RETURN> e = Exp() {return new Retour(e);}
    | <WRITE> <PARRG>  (t = <IDENT> <PARRD> {return new Ecrire(new Identifiant(t.image));} | t = <STRING> <PARRD> {return new Ecrire(new HardcodedString(t.image));})
    | <WRITELN> <PARRG>  (t = <STRING> <PARRD> {return new EcrireLn(new HardcodedString(t.image));} |t = <IDENT> <PARRD> {return new EcrireLn(new Identifiant(t.image));})
    | <IF> e = Exp() <ACCG> instrs = Instrs() <ACCD> (
        <ELSE><ACCG> instrs1 = Instrs() <ACCD>{return new Si(e,instrs, instrs1);}
        | {return new Si(e,instrs, new Inil());}
    )
    | <WHILE> <PARRG>e =  Exp() <PARRD> <ACCG>instrs = Instrs()<ACCD>{return new TantQue(e,instrs);}
}


//void InstrP(): {} {<EGAL> Exp() | <PEG> Exp() | <PP>}

ASTInstr InstrP(Token t): {ASTExpr e; ASTIdentGenerique ident; ASTInstr inst;}{
    <EGAL> e = Exp(){return new Affectation(new Identifiant(t.image), e);}
    | <PEG> e = Exp(){return new Somme(new Identifiant(t.image), e);}
    | <PP> {return new Increment(new Identifiant(t.image));}
    | <TABG> e = Exp() <TABD> {ident = new Tableau(t.image, e);} inst = InstrTableau(ident) {return inst;}
}

ASTInstr InstrTableau(ASTIdentGenerique g): {ASTExpr e;} {
    <EGAL> e = Exp(){return new Affectation(g, e);}
    | <PEG> e = Exp(){return new Somme(g, e);}
    | <PP> {return new Increment(g);}
}


//void Listexp(): {} {Exp() <VIRGULE> Listexp() | Exp() | {}}
ASTListExpr Listexp(): {ASTListExpr ls; ASTExpr e;} {
    e = Exp() ls = ListexpP() {return new ExChain(e, ls);}
    | {return new Exnil();}
}

ASTListExpr ListexpP(): {ASTListExpr ls;} {
    <VIRGULE> ls = Listexp() {return ls;}
    | {return new Exnil();}
}
//void Exp(): {} {<EXCL> Exp1() | Exp() <ET> Exp1() | Exp() <OU> Exp1() | Exp1()} /*pb rec à gauche*/
ASTExpr Exp(): {ASTExpr result;}{
    <EXCL> result = Exp1() {result = new Not(result);} result = ExpP(result) {return result;}
    | result = Exp1() result = ExpP(result) {return result;}
}//corrige la rec à gauche de Exp => à vérifier

ASTExpr ExpP(ASTExpr left) : {ASTExpr result;} {
    <ET> result = Exp1() {result = new Binop(Binop.Operandes.AND, left, result);} result = ExpP(result) {return result;}
    | <OU> result = Exp1() {result = new Binop(Binop.Operandes.OR, left, result);} result = ExpP(result) {return result;}
    | {return left;}
} //corrige la rec à gauche de Exp => à vérifier


//void Exp1(): {} {Exp1() <EGEG> Exp2() | Exp1() <SUP> Exp2() | Exp2()}/*pb rec à gauche*/
ASTExpr Exp1(): {ASTExpr expr;}{
    expr = Exp2() expr = Exp1P(expr) {return expr;}
}//corrige la rec à gauche de Exp1 => à vérifier

ASTExpr Exp1P(ASTExpr left) : {ASTExpr result;}{
    <EGEG> result = Exp2() {result = new Binop(Binop.Operandes.EGAL, left, result);} result = Exp1P(result) {return result;}
    | <SUP> result = Exp2() {result = new Binop(Binop.Operandes.SUPERIEUR, left, result);} result = Exp1P(result) {return result;}
    | {return left;}
}//corrige la rec à gauche de Exp1 => à vérifier


//void Exp2(): {} {Exp2() <PLUS> Terme() | Exp2() <MOINS> Terme() | Terme()}/*pb rec à gauche*/
ASTExpr Exp2(): {ASTExpr expr;} {
    expr = Terme() expr = Exp2P(expr) {return expr;}
    | <MOINS> expr = Terme() {return new Negation(expr);}
}//corrige la rec à gauche de Exp2 => à vérifier

ASTExpr Exp2P(ASTExpr left): {ASTExpr result;} {
    <PLUS> result = Terme() {result = new Binop(Binop.Operandes.ADDITION, left, result);} result = Exp2P(result) {return result;}
    | <MOINS> result = Terme() {result = new Binop(Binop.Operandes.SOUSTRACTION, left, result);} result = Exp2P(result) {return result;}
    | {return left;}
}//corrige la rec à gauche de Exp2 => à vérifier


//void Terme(): {} {Terme() <MULT> Fact() | Terme() <DIV> Fact() | Fact()}/*pb rec à gauche*/
ASTExpr Terme(): {ASTExpr expr;}{
    expr = Fact() expr = TermeP(expr) {return expr;}
}//corrige la rec à gauche de Exp2 => à vérifier

ASTExpr TermeP(ASTExpr left): {ASTExpr result;}{
    <MULT> result = Fact() {result = new Binop(Binop.Operandes.MULTIPLICATION, left, result);} result = TermeP(result) {return result;}
    | <DIV> result = Fact() {result = new Binop(Binop.Operandes.DIVISION, left, result);} result = TermeP(result) {return result;}
    | {return left;}
}//corrige la rec à gauche de Exp2 => à vérifier

ASTExpr Fact(): {Token t; ASTExpr e;} {
    t = <IDENT> e = FactP(t) {return e;}
    |<VRAI> {return new BoolVal(true);}
    |<FAUX> {return new BoolVal(false);}
    |t = <NOMBRE> {return new Nbre(Integer.parseInt(t.image));}
    |<PARRG> e = Exp()<PARRD> {return e;}
}

ASTExpr FactP(Token t): {ASTExpr e; ASTListExpr ls;}{
    <TABG> e = Exp() <TABD> {return new Tableau(t.image, e);}
    | <PARRG> ls = Listexp() <PARRD> {return new AppelE(new Identifiant(t.image), ls);}
    | {return new Identifiant(t.image);}
}

ASTExpr Ident1(): {ASTExpr expression;} {
      <TABG> expression = Exp() <TABD> {return expression;}
    | {return new Omega();}
}

ASTTypeMeth TypeMeth(): {ASTType t;} {
    <VOID> { return new fr.femtost.disc.minijaja.ast.type.Void();}
    | t = Type() { return t; }
}

ASTType Type(): {} {
    <ENTIER> {return new Entier();}
    | <BOOL> {return new Booleen();}
}