/* SyntaxCheckerTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. SyntaxCheckerTokenManager.java */
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SyntaxCheckerTokenManager implements SyntaxCheckerConstants {
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000L) != 0x0L)
            return 29;
         if ((active0 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 40;
            return 8;
         }
         if ((active0 & 0x3001b1c100L) != 0x0L)
         {
            jjmatchedKind = 40;
            return 37;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000L) != 0x0L)
            return 38;
         if ((active0 & 0x3001b1c100L) != 0x0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
            return 38;
         }
         return -1;
      case 2:
         if ((active0 & 0x3001b1c100L) != 0x0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
            return 38;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000800000L) != 0x0L)
            return 38;
         if ((active0 & 0x200131c100L) != 0x0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
            return 38;
         }
         return -1;
      case 4:
         if ((active0 & 0x2001300000L) != 0x0L)
            return 38;
         if ((active0 & 0x18000L) != 0x0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 4;
            }
            return 38;
         }
         return -1;
      case 5:
         if ((active0 & 0x10000L) != 0x0L)
            return 38;
         if ((active0 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
            return 38;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case '!':
         return jjStopAtPos(0, 29);
      case '&':
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case '(':
         return jjStopAtPos(0, 12);
      case ')':
         return jjStopAtPos(0, 13);
      case '*':
         return jjStopAtPos(0, 34);
      case '+':
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      case ',':
         return jjStopAtPos(0, 39);
      case '-':
         return jjStopAtPos(0, 33);
      case '/':
         return jjStartNfaWithStates_0(0, 35, 29);
      case ';':
         return jjStopAtPos(0, 11);
      case '=':
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case '>':
         return jjStopAtPos(0, 31);
      case '[':
         return jjStopAtPos(0, 18);
      case ']':
         return jjStopAtPos(0, 19);
      case 'e':
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 'f':
         return jjMoveStringLiteralDfa1_0(0x2000008000L);
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 'm':
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 'r':
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 't':
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 'v':
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 'w':
         return jjMoveStringLiteralDfa1_0(0x1300000L);
      case '{':
         return jjStopAtPos(0, 9);
      case '|':
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case '}':
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case '&':
         if ((active0 & 0x10000000L) != 0x0L)
            return jjStopAtPos(1, 28);
         break;
      case '+':
         if ((active0 & 0x4000000L) != 0x0L)
            return jjStopAtPos(1, 26);
         break;
      case '=':
         if ((active0 & 0x2000000L) != 0x0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x40000000L) != 0x0L)
            return jjStopAtPos(1, 30);
         break;
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x2000004000L);
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 'f':
         if ((active0 & 0x400000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 22, 38);
         break;
      case 'h':
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 'i':
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 'l':
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 'o':
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 'r':
         return jjMoveStringLiteralDfa2_0(active0, 0x1000300000L);
      case '|':
         if ((active0 & 0x8000000L) != 0x0L)
            return jjStopAtPos(1, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 'i':
         return jjMoveStringLiteralDfa3_0(active0, 0x1304100L);
      case 'l':
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 'n':
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 's':
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 't':
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 'u':
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 'd':
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 'e':
         if ((active0 & 0x800000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 23, 38);
         else if ((active0 & 0x1000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 36, 38);
         break;
      case 'l':
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 'n':
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 's':
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 't':
         return jjMoveStringLiteralDfa4_0(active0, 0x300000L);
      case 'u':
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case ' ':
         if ((active0 & 0x100L) != 0x0L)
            return jjStopAtPos(4, 8);
         else if ((active0 & 0x4000L) != 0x0L)
            return jjStopAtPos(4, 14);
         break;
      case 'e':
         if ((active0 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 24, 38);
         else if ((active0 & 0x2000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 37, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 'l':
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 'r':
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case ' ':
         if ((active0 & 0x8000L) != 0x0L)
            return jjStopAtPos(5, 15);
         break;
      case 'l':
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 'n':
         if ((active0 & 0x10000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 16, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 'n':
         if ((active0 & 0x200000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 21, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     { jjCheckNAdd(27); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 8:
               case 19:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(19); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(19); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(19); }
                  break;
               case 29:
                  if (curChar == 42)
                     { jjCheckNAddStates(2, 4); }
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(30); }
                  }
                  break;
               case 1:
                  if (curChar == 32 && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if (curChar == 32 && kind > 38)
                     kind = 38;
                  break;
               case 24:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 25:
                  if ((0xfffffffbffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 26:
                  if (curChar == 34 && kind > 41)
                     kind = 41;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) == 0x0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(30); }
                  break;
               case 31:
                  if (curChar == 42)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 32:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 33:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xffff7fffffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               case 35:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 36:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffeL & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(5, 7); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(8, 10); }
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0x7fffffe00000000L & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(11, 14); }
                  }
                  else if ((0x7fffffeL & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddTwoStates(18, 19); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 38:
                  if ((0x7fffffe00000000L & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(11, 14); }
                  }
                  else if ((0x7fffffeL & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddTwoStates(18, 19); }
                  }
                  if ((0x7fffffe00000000L & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(15, 17); }
                  }
                  break;
               case 37:
                  if ((0x7fffffe00000000L & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(11, 14); }
                  }
                  else if ((0x7fffffeL & l) != 0x0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddTwoStates(18, 19); }
                  }
                  break;
               case 0:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 116)
                     { jjCheckNAdd(6); }
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 110)
                     { jjCheckNAdd(6); }
                  break;
               case 11:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x7fffffe00000000L & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 18:
                  if ((0x7fffffeL & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if ((0x7fffffe00000000L & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(11, 14); }
                  break;
               case 21:
                  if ((0x7fffffe00000000L & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 22:
                  if ((0x7fffffeL & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(5, 7); }
                  break;
               case 23:
                  if ((0x7fffffeL & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(18, 21); }
                  break;
               case 25:
                  { jjAddStates(22, 23); }
                  break;
               case 30:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
               case 34:
                  { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(22, 23); }
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(2, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 37 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\166\157\151\144\40", "\173", 
"\175", "\73", "\50", "\51", "\155\141\151\156\40", "\146\151\156\141\154\40", 
"\162\145\164\165\162\156", "\75", "\133", "\135", "\167\162\151\164\145", "\167\162\151\164\145\154\156", 
"\151\146", "\145\154\163\145", "\167\150\151\154\145", "\53\75", "\53\53", "\174\174", 
"\46\46", "\41", "\75\75", "\76", "\53", "\55", "\52", "\57", "\164\162\165\145", 
"\146\141\154\163\145", null, "\54", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   29, 31, 32, 33, 36, 21, 19, 23, 18, 19, 20, 21, 18, 19, 20, 21, 
   18, 19, 21, 18, 19, 23, 25, 26, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try {
     input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0x0L)
         curChar = input_stream.beginToken();
   }
   catch (final java.io.IOException e1) {
     continue EOFLoop;
   }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try {
     input_stream.readChar();
     input_stream.backup(1);
   }
   catch (final java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.getImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.getImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("D\u00e9claration d'une nouvelle classe");
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                 System.out.println("D\u00e9claration d'une instance void");
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
             System.out.println("Ouverture d'une accolade");
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
             System.out.println("Fermeture d'une accolade");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
           System.out.println("Point virgule");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
              System.out.println("Ouverture d'une parenth\u00e8se");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
              System.out.println("Fermeture d'une parenth\u00e8se");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                System.out.println("M\u00e9thode principale");
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                  System.out.println("m\u00e9thode ou variable final");
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                    System.out.println("retour attendu");
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
             System.out.println("Affectation");
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
             System.out.println("Ouverture de crochets");
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
             System.out.println("Fermeture de crochets");
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                  System.out.println("La console doit \u00e9crire");
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                      System.out.println("La console doit \u00e9crire puis revenir \u00e0 la ligne");
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
            System.out.println("Si");
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                System.out.println("Sinon");
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                  System.out.println("Tant que");
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
             System.out.println("Est \u00e9gal \u00e0 la valeur plus 1");
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
            System.out.println("Incr\u00e9mentation");
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
            System.out.println("Ou");
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
            System.out.println("Et");
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
             System.out.println("Point d'exclamation");
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
               System.out.println("Est \u00e9gal \u00e0 ");
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
             System.out.println("Est sup\u00e9rieur \u00e0");
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
              System.out.println("Addition");
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
               System.out.println("Soustraction");
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
              System.out.println("Multiplication");
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
             System.out.println("Division");
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                System.out.println("Vrai");
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                 System.out.println("Faux");
         break;
      case 38 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("Type de la variable : "+ matchedToken.image);
         break;
      case 40 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                             System.out.println("Identificateur :"+ matchedToken.image);
         break;
      case 41 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("Chaine de caract\u00e8res :"+ matchedToken.image);
         break;
      case 42 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("Entier :"+ matchedToken.image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SyntaxCheckerTokenManager(SimpleCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public SyntaxCheckerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[37];
    private final int[] jjstateSet = new int[2 * 37];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
